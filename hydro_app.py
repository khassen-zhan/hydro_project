import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import datetime
import numpy as np
import math

st.set_page_config(page_title="–ì–∏–¥—Ä–æ–º–æ–¥—É–ª—å ‚Äì —Ä–∞—Å—á—ë—Ç –∏ –ø—Ä–æ–≥–Ω–æ–∑", layout="wide")

st.markdown("# üåø **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á—ë—Ç–∞ –≥–∏–¥—Ä–æ–º–æ–¥—É–ª—è**")
st.markdown("---")

# === –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ ===
kc_values = {
    "–ü—à–µ–Ω–∏—Ü–∞": [0.3, 1.15, 0.35],
    "–ö—É–∫—É—Ä—É–∑–∞": [0.4, 1.20, 0.6],
    "–•–ª–æ–ø–æ–∫": [0.4, 1.25, 0.6],
    "–†–∏—Å": [1.1, 1.20, 0.9],
    "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å": [0.5, 1.15, 0.8],
    "–¢–æ–º–∞—Ç—ã": [0.6, 1.15, 0.8],
    "–û–≥—É—Ä—Ü—ã": [0.6, 1.05, 0.8],
    "–ê—Ä–±—É–∑": [0.5, 0.85, 0.65],
    "–î—ã–Ω—è": [0.4, 0.85, 0.65],
    "–°–æ—è": [0.4, 1.15, 0.5],
    "–õ—é—Ü–µ—Ä–Ω–∞": [0.4, 1.10, 0.9],
    "–õ—É–∫": [0.7, 1.10, 0.85],
    "–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫": [0.3, 1.15, 0.45],
    "–°–∞—Ö–∞—Ä–Ω–∞—è —Å–≤–µ–∫–ª–∞": [0.4, 1.20, 0.8],
    "–í–∏–Ω–æ–≥—Ä–∞–¥": [0.3, 0.80, 0.5]
}
kpd_dict = {
    "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ": 0.6,
    "–î–æ–∂–¥–µ–≤–∞–Ω–∏–µ": 0.8,
    "–ö–∞–ø–µ–ª—å–Ω–æ–µ": 0.95
}
if "history" not in st.session_state:
    st.session_state.history = []

# === –†—è–¥ —Å –¥–≤—É–º—è —Ñ–æ—Ä–º–∞–º–∏ ===
col_form1, col_form2 = st.columns(2)

with col_form1:
    with st.form("form_input"):
        st.subheader("üìå **–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**")
        culture = st.selectbox("**–ö—É–ª—å—Ç—É—Ä–∞**", list(kc_values.keys()))
        phase = st.radio("**–§–∞–∑–∞ —Ä–æ—Å—Ç–∞**", ["–ù–∞—á–∞–ª—å–Ω–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–ü–æ–∑–¥–Ω—è—è"])
        irrigation_type = st.selectbox("**–¢–∏–ø –æ—Ä–æ—à–µ–Ω–∏—è**", list(kpd_dict.keys()))
        start_date = st.date_input("**–ù–∞—á–∞–ª–æ –ø—Ä–æ–≥–Ω–æ–∑–∞**", value=datetime.date.today())
        days_forecast = st.slider("**–î–Ω–µ–π –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ**", 1, 30, 3)
        submitted = st.form_submit_button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")

if "form_values" not in st.session_state or submitted:
    st.session_state.form_values = {
        "culture": culture,
        "phase": phase,
        "irrigation_type": irrigation_type,
        "start_date": start_date,
        "days_forecast": days_forecast
    }

form_data = st.session_state.form_values
culture = form_data["culture"]
phase = form_data["phase"]
irrigation_type = form_data["irrigation_type"]
start_date = form_data["start_date"]
days_forecast = form_data["days_forecast"]

kc = kc_values[culture][{"–ù–∞—á–∞–ª—å–Ω–∞—è": 0, "–°—Ä–µ–¥–Ω—è—è": 1, "–ü–æ–∑–¥–Ω—è—è": 2}[phase]]
kpd = kpd_dict[irrigation_type]

# === –í—Ç–æ—Ä–∞—è —Ñ–æ—Ä–º–∞: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –∫–ª–∏–º–∞—Ç ===
with col_form2:
    with st.form("form_climate"):
        st.subheader("üåç **–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –∫–ª–∏–º–∞—Ç**")
        col_geo = st.columns(2)
        latitude = col_geo[0].number_input("**–®–∏—Ä–æ—Ç–∞**", value=42.616328, format="%.6f")
        longitude = col_geo[1].number_input("**–î–æ–ª–≥–æ—Ç–∞**", value=69.549866, format="%.6f")

        st.markdown("### üìä **ET‚ÇÄ –∏ –æ—Å–∞–¥–∫–∏ –ø–æ –¥–Ω—è–º**")
        st.markdown("‚ÑπÔ∏è **–§–æ—Ä–º—É–ª–∞:** ET‚ÇÄ = 3.5 + 2.0 √ó |sin(—à–∏—Ä–æ—Ç–∞)| √ó sin(2œÄ √ó (DOY ‚àí 80) / 365)")

        date_list = [start_date + datetime.timedelta(days=i) for i in range(days_forecast)]
        et0_list = []
        precip_list = []

        for i in range(days_forecast):
            day_of_year = date_list[i].timetuple().tm_yday
            et0 = 3.5 + 2.0 * abs(math.sin(math.radians(latitude))) * math.sin(2 * math.pi * (day_of_year - 80) / 365)
            et0 = round(et0, 2)
            et0_list.append(et0)

            row = st.columns([1, 1, 1.5, 2])
            row[0].markdown(f"**ET‚ÇÄ:** {et0} –º–º")
            row[1].markdown("**–û—Å–∞–¥–∫–∏:**")
            row[2].markdown(f"**{date_list[i].strftime('%d.%m.%Y')}**")
            precip = row[3].number_input("–û—Å–∞–¥–∫–∏", key=f"prec_{i}", value=0.0, step=0.1, label_visibility="collapsed")
            precip_list.append(precip)

        st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å")

# === –†–∞—Å—á—ë—Ç –≥–∏–¥—Ä–æ–º–æ–¥—É–ª—è ===
q_values = [max((et0_list[i] * kc - precip_list[i]) / kpd, 0) for i in range(days_forecast)]
avg_q = round(np.mean(q_values), 2)

# === –ì—Ä–∞—Ñ–∏–∫ ===
st.markdown("### üìà **–ü—Ä–æ–≥–Ω–æ–∑ –≤–æ–¥–æ–ø–æ–¥–∞—á–∏**")
st.success(f"üìå **–°—Ä–µ–¥–Ω–∏–π –≥–∏–¥—Ä–æ–º–æ–¥—É–ª—å: {avg_q} –º–º/–¥–µ–Ω—å**")
st.markdown("**–§–æ—Ä–º—É–ª–∞:** q = (ET‚ÇÄ √ó Kc - –æ—Å–∞–¥–∫–∏) / –ö–ü–î")

fig, ax = plt.subplots(figsize=(7, 3))
ax.plot(date_list, q_values, marker='o', linestyle='-', color='teal')

# –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã, –±–µ–∑ –ø–æ–¥–ø–∏—Å–µ–π
ax.set_xlabel("–î–∞—Ç–∞", fontsize=9)
ax.set_ylabel("–ì–∏–¥—Ä–æ–º–æ–¥—É–ª—å, –º–º", fontsize=9)
ax.set_title("–î–∏–Ω–∞–º–∏–∫–∞ –≤–æ–¥–æ–ø–æ–¥–∞—á–∏", fontsize=10)
ax.tick_params(axis='both', labelsize=8)
ax.tick_params(axis='x', rotation=30)
ax.set_xticks(date_list)
ax.set_xticklabels([d.strftime("%d.%m") for d in date_list], rotation=30, ha='right')
fig.tight_layout()
st.pyplot(fig)

# === –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏—Å—Ç–æ—Ä–∏—è ===
record = {
    "–î–∞—Ç–∞": datetime.date.today().isoformat(),
    "–ö—É–ª—å—Ç—É—Ä–∞": culture,
    "–§–∞–∑–∞": phase,
    "–¢–∏–ø –æ—Ä–æ—à–µ–Ω–∏—è": irrigation_type,
    "Kc": kc,
    "–ö–ü–î": kpd,
    "–®–∏—Ä–æ—Ç–∞": latitude,
    "–î–æ–ª–≥–æ—Ç–∞": longitude,
    "–°—Ä–µ–¥–Ω–∏–π –≥–∏–¥—Ä–æ–º–æ–¥—É–ª—å": avg_q
}
st.session_state.history.append(record)

df_result = pd.DataFrame({
    "–î–∞—Ç–∞": date_list,
    "ET‚ÇÄ": et0_list,
    "–û—Å–∞–¥–∫–∏": precip_list,
    "–ì–∏–¥—Ä–æ–º–æ–¥—É–ª—å": q_values
})

st.download_button(
    label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ Excel",
    data=df_result.to_csv(index=False).encode('utf-8-sig'),
    file_name="–≥–∏–¥—Ä–æ–º–æ–¥—É–ª—å_–ø—Ä–æ–≥–Ω–æ–∑.csv",
    mime="text/csv"
)

st.markdown("---")
st.markdown("### üìú **–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é**")
df_history = pd.DataFrame(st.session_state.history)
st.dataframe(df_history, use_container_width=True)

st.markdown("---")
st.caption("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –≥–∏–¥—Ä–æ–º–æ–¥—É–ª—é")
